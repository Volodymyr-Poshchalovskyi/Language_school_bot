/**
 * @file bot.js
 * @description –ê–¥–º—ñ–Ω-–±–æ—Ç –¥–ª—è –º–æ–≤–Ω–æ—ó —à–∫–æ–ª–∏. –û–±—Ä–æ–±–ª—è—î –∑–∞—è–≤–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Supabase.
 */

// --- –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü –¢–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
require('dotenv').config(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// –í–∏—Ç—è–≥—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏ –∫–æ–¥—É
const {
  TELEGRAM_BOT_TOKEN: token,
  SECRET_PASSWORD: secretPassword,
  SUPABASE_URL: supabaseUrl,
  SUPABASE_ANON_KEY: supabaseKey,
  ADMIN_CHAT_ID: adminChatId,
  RENDER_EXTERNAL_URL: botUrl 
} = process.env;

// –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ –Ω–∞—è–≤–Ω—ñ
if (!token || !secretPassword || !supabaseUrl || !supabaseKey || !adminChatId) {
  console.error('–ü–û–ú–ò–õ–ö–ê: –í—ñ–¥—Å—É—Ç–Ω—è –æ–¥–Ω–∞ –∞–±–æ –∫—ñ–ª—å–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ Render.');
  process.exit(1);
}

// --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ---
const bot = new TelegramBot(token); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ –ë–ï–ó polling
const app = express();
app.use(express.json()); // –î–æ–∑–≤–æ–ª—è—î–º–æ —Å–µ—Ä–≤–µ—Ä—É –æ–±—Ä–æ–±–ª—è—Ç–∏ JSON

const PORT = process.env.PORT || 3000;

// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫, —â–æ–± Telegram –Ω–∞–¥—Å–∏–ª–∞–≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
const webhookPath = `/webhook/${token}`;
const fullWebhookUrl = `${botUrl}${webhookPath}`;
bot.setWebHook(fullWebhookUrl);

// --- –ö–ï–†–£–í–ê–ù–ù–Ø –°–¢–ê–ù–û–ú (–≤ –ø–∞–º'—è—Ç—ñ) ---
const authorizedUsers = new Set([parseInt(adminChatId, 10)]); // –ê–¥–º—ñ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
const chatMessages = new Map(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É

// --- –ö–õ–ê–í–Ü–ê–¢–£–†–ê TELEGRAM ---
const mainKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: '–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å–µ' }],
      [{ text: '–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ä–æ–∫' }, { text: '–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫' }],
    ],
    resize_keyboard: true,
  },
};

// --- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.
 * @param {number} chatId ID —á–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.
 * @returns {boolean}
 */
const isAuthorized = (chatId) => authorizedUsers.has(chatId);

/**
 * –í–∏–¥–∞–ª—è—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –±–æ—Ç–æ–º.
 * @param {number} chatId ID —á–∞—Ç—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—á–∏—Å—Ç–∏—Ç–∏.
 */
async function clearPreviousMessages(chatId) {
  const messageIds = chatMessages.get(chatId);
  if (messageIds && messageIds.length > 0) {
    await Promise.all(
      messageIds.map(id => bot.deleteMessage(chatId, id).catch(() => {}))
    );
  }
  chatMessages.set(chatId, []);
}

/**
 * –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ ID –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
 * @param {number} chatId ID —á–∞—Ç—É.
 * @param {string} text –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
 * @param {object} options –û–ø—Ü—ñ—ó –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
 */
async function sendAndTrackMessage(chatId, text, options) {
  try {
    const sentMsg = await bot.sendMessage(chatId, text, options);
    const currentMessages = chatMessages.get(chatId) || [];
    chatMessages.set(chatId, [...currentMessages, sentMsg.message_id]);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error.message);
  }
}

// --- –§–£–ù–ö–¶–Ü–á –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ê–ù–ò–• ---

/**
 * –û—Ç—Ä–∏–º—É—î —Ç–∞ –ø–æ–∫–∞–∑—É—î –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ä–æ–∫–∏.
 * @param {number} chatId
 */
async function showApplications(chatId) {
  try {
    const { data: applications } = await axios.get(`${supabaseUrl}/rest/v1/Applications?select=*&order=id.asc`, { headers: { apikey: supabaseKey } });
    if (!applications || applications.length === 0) {
      return sendAndTrackMessage(chatId, 'üìÇ –ó–∞—è–≤–æ–∫ –Ω–∞ —É—Ä–æ–∫ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î.', mainKeyboard);
    }
    let message = 'üìã <b>–í—Å—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ä–æ–∫:</b>\n\n' + '<pre>' + 'ID  | –Ü–º\'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ    | –ö–æ–Ω—Ç–∞–∫—Ç–∏\n' + '----|----------------------|--------------------------\n';
    applications.forEach(app => {
      const id = app.id.toString().padEnd(4);
      const name = `${app.firstName} ${app.lastName}`.slice(0, 20).padEnd(22);
      const contact = (app.email || app.phone || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ').slice(0, 26);
      message += `${id}| ${name}| ${contact}\n`;
    });
    message += '</pre>';
    const options = { parse_mode: 'HTML', reply_markup: { inline_keyboard: applications.map(app => ([{ text: `üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É ‚Ññ${app.id}`, callback_data: `copy_app_${app.id}` }])) } };
    sendAndTrackMessage(chatId, message, options);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫ –Ω–∞ —É—Ä–æ–∫:', error.response?.data || error.message);
    sendAndTrackMessage(chatId, '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ä–æ–∫.', mainKeyboard);
  }
}

/**
 * –û—Ç—Ä–∏–º—É—î —Ç–∞ –ø–æ–∫–∞–∑—É—î –∑–∞–ø–∏—Ç–∏ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫.
 * @param {number} chatId
 */
async function showCallbacks(chatId) {
  try {
    const { data: callbacks } = await axios.get(`${supabaseUrl}/rest/v1/CallBacks?select=*&order=id.asc`, { headers: { apikey: supabaseKey } });
    if (!callbacks || callbacks.length === 0) {
      return sendAndTrackMessage(chatId, 'üìÇ –ó–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î.', mainKeyboard);
    }
    let message = 'üìû <b>–í—Å—ñ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫:</b>\n\n' + '<pre>' + 'ID  | –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n' + '----|------------------\n';
    callbacks.forEach(cb => { message += `${cb.id.toString().padEnd(4)}| ${cb.phone}\n`; });
    message += '</pre>';
    const options = { parse_mode: 'HTML', reply_markup: { inline_keyboard: callbacks.map(cb => ([{ text: `üìû –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫ ‚Ññ${cb.id}`, callback_data: `copy_cb_${cb.id}` }])) } };
    sendAndTrackMessage(chatId, message, options);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫:', error.response?.data || error.message);
    sendAndTrackMessage(chatId, '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫.', mainKeyboard);
  }
}

// --- –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô –ë–û–¢–ê ---

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
bot.onText(/\/start(.*)/, async (msg, match) => {
  const chatId = msg.chat.id;
  await clearPreviousMessages(chatId);
  const password = match[1].trim();
  if (!password) {
    return sendAndTrackMessage(chatId, '–í—ñ—Ç–∞—é! –î–ª—è –¥–æ—Å—Ç—É–ø—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∑ –ø–∞—Ä–æ–ª–µ–º:\n`/start –≤–∞—à_–ø–∞—Ä–æ–ª—å`', { parse_mode: 'Markdown'});
  }
  if (password === secretPassword) {
    authorizedUsers.add(chatId);
    sendAndTrackMessage(chatId, '‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', { parse_mode: 'HTML', ...mainKeyboard });
  } else {
    sendAndTrackMessage(chatId, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å.');
  }
});

// ! --- –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∞ —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥—É /start, –±–æ –≤–æ–Ω–∞ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ
  if (msg.text && msg.text.startsWith('/start')) return;

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  if (!isAuthorized(chatId)) {
    await clearPreviousMessages(chatId);
    return sendAndTrackMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å. –í–≤–µ–¥—ñ—Ç—å `/start [–ø–∞—Ä–æ–ª—å]`', { parse_mode: 'Markdown' });
  }
  
  // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
  await clearPreviousMessages(chatId);

  // –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
  switch (msg.text) {
    case '–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å–µ':
      await showApplications(chatId);
      await sendAndTrackMessage(chatId, '---', mainKeyboard);
      await showCallbacks(chatId);
      break;
    case '–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ä–æ–∫':
      await showApplications(chatId);
      break;
    case '–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫':
      await showCallbacks(chatId);
      break;
    default:
      sendAndTrackMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.', mainKeyboard);
  }
});


// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –≤–±—É–¥–æ–≤–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏ "–ö–æ–ø—ñ—é–≤–∞—Ç–∏"
bot.on('callback_query', async (callbackQuery) => {
  const { data, message } = callbackQuery;
  const chatId = message.chat.id;
  bot.answerCallbackQuery(callbackQuery.id); // –ó–∞–≤–µ—Ä—à—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø—Ü—ñ

  if (!isAuthorized(chatId)) { return bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.'); }

  const [action, type, id] = data.split('_');
  if (action === 'copy') {
    let responseText = `–î–∞–Ω—ñ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:\n\n`;
    try {
      if (type === 'app') {
        const { data: applications } = await axios.get(`${supabaseUrl}/rest/v1/Applications?id=eq.${id}&select=*`, { headers: { apikey: supabaseKey } });
        const app = applications[0];
        if (app) { responseText += `–Ü–º'—è: ${app.firstName} ${app.lastName}\nEmail: ${app.email || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${app.phone || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n–§–æ—Ä–º–∞—Ç: ${app.lessonFormat}`; }
      } else if (type === 'cb') {
        const { data: callbacks } = await axios.get(`${supabaseUrl}/rest/v1/CallBacks?id=eq.${id}&select=*`, { headers: { apikey: supabaseKey } });
        const cb = callbacks[0];
        if (cb) { responseText += `–¢–µ–ª–µ—Ñ–æ–Ω: ${cb.phone}`; }
      }
      sendAndTrackMessage(chatId, `<code>${responseText}</code>`, { parse_mode: 'HTML', ...mainKeyboard });
    } catch (error) {
      sendAndTrackMessage(chatId, '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å.', mainKeyboard);
    }
  }
});


// --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–ï–†–í–ï–†–ê –î–õ–Ø –í–ï–ë–•–£–ö–Ü–í ---

// –ú–∞—Ä—à—Ä—É—Ç, –Ω–∞ —è–∫–∏–π Telegram –Ω–∞–¥—Å–∏–ª–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
app.post(webhookPath, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –≤—ñ–¥ Render
app.get('/', (req, res) => { res.status(200).send('Bot server is running and healthy.'); });

// –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –ø—Ä–∏–π–æ–º—É —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤—ñ–¥ Supabase
app.post('/notify/application', (req, res) => {
  try {
    const { record: app } = req.body;
    if (!app) { return res.status(400).send('Bad Request'); }
    const message = `üéâ <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Ä–æ–∫!</b>\n\n` + `<b>–Ü–º'—è:</b> ${app.firstName} ${app.lastName}\n` + `<b>–ö–æ–Ω—Ç–∞–∫—Ç–∏:</b> <code>${app.email || app.phone || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n` + `<b>–§–æ—Ä–º–∞—Ç:</b> ${app.lessonFormat}`;
    bot.sendMessage(adminChatId, message, { parse_mode: 'HTML' });
    res.status(200).send('OK');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (application):', error);
    res.status(500).send('Server Error');
  }
});

app.post('/notify/callback', (req, res) => {
  try {
    const { record: cb } = req.body;
    if (!cb) { return res.status(400).send('Bad Request'); }
    const message = `üîî <b>–ó–∞–º–æ–≤–ª–µ–Ω–æ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫!</b>\n\n` + `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${cb.phone}</code>`;
    bot.sendMessage(adminChatId, message, { parse_mode: 'HTML' });
    res.status(200).send('OK');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (callback):', error);
    res.status(500).send('Server Error');
  }
});

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫—ñ–≤ –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`–ë–æ—Ç –æ—á—ñ–∫—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é: ${fullWebhookUrl}`);
});