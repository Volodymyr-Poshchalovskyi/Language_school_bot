// bot.js

// 1. –Ü–ú–ü–û–†–¢ –ë–Ü–ë–õ–Ü–û–¢–ï–ö –Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
// ----------------------------------------------------
require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');

// --- –ó–∞–±–∏—Ä–∞—î–º–æ –Ω–∞—à—ñ —Å–µ–∫—Ä–µ—Ç–∏ –∑ .env ---
const token = process.env.TELEGRAM_BOT_TOKEN;
const adminChatId = process.env.ADMIN_CHAT_ID;
const secretPassword = process.env.SECRET_PASSWORD;
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

// --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ —Ç–∞ —Å–µ—Ä–≤–µ—Ä ---
const bot = new TelegramBot(token, { polling: true });
const app = express();
app.use(express.json());

const PORT = process.env.PORT || 3000;

// --- –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---
const authorizedUsers = new Set();
if (adminChatId) {
  authorizedUsers.add(parseInt(adminChatId, 10));
}

// 2. –õ–û–ì–Ü–ö–ê –î–õ–Ø –ö–û–ú–ê–ù–î –ë–û–¢–ê (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
// ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏ /start, /show_all —ñ —Ç.–¥. –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç—É—Ç)
// --- –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó ---
const isAuthorized = (chatId) => authorizedUsers.has(chatId);

// --- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó ---
bot.onText(/\/start (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const password = match[1];

  if (password === secretPassword) {
    authorizedUsers.add(chatId);
    bot.sendMessage(chatId, '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏.');
  } else {
    bot.sendMessage(chatId, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å.');
  }
});

// --- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /show_all –¥–ª—è –ø–æ–∫–∞–∑—É –≤—Å—ñ—Ö –∑–∞—è–≤–æ–∫ ---
bot.onText(/\/show_all/, async (msg) => {
  const chatId = msg.chat.id;
  if (!isAuthorized(chatId)) {
    return bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: `/start [–ø–∞—Ä–æ–ª—å]`', { parse_mode: 'Markdown' });
  }

  try {
    // --- –ó–∞–ø–∏—Ç –¥–æ —Ç–∞–±–ª–∏—Ü—ñ Applications ---
    const appResponse = await fetch(`${supabaseUrl}/rest/v1/Applications?select=*`, {
      headers: { 'apikey': supabaseKey, 'Authorization': `Bearer ${supabaseKey}` }
    });
    const applications = await appResponse.json();

    let appMessage = 'üìã **–ó–∞—è–≤–∫–∏ –Ω–∞ —É—Ä–æ–∫:**\n';
    if (applications.length > 0) {
      applications.forEach(app => {
        appMessage += `------------------------\n–Ü–º'—è: ${app.firstName} ${app.lastName}\n–ö–æ–Ω—Ç–∞–∫—Ç–∏: ${app.email || app.phone}\n`;
      });
    } else {
      appMessage += '–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î.\n';
    }
    await bot.sendMessage(chatId, appMessage, { parse_mode: 'Markdown' });

    // --- –ó–∞–ø–∏—Ç –¥–æ —Ç–∞–±–ª–∏—Ü—ñ CallBacks ---
    const cbResponse = await fetch(`${supabaseUrl}/rest/v1/CallBacks?select=*`, {
      headers: { 'apikey': supabaseKey, 'Authorization': `Bearer ${supabaseKey}` }
    });
    const callbacks = await cbResponse.json();
    
    let cbMessage = 'üìû **–ó–∞–ø–∏—Ç–∏ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫:**\n';
    if (callbacks.length > 0) {
      callbacks.forEach(cb => {
        cbMessage += `------------------------\n–ù–æ–º–µ—Ä: \`${cb.phone}\`\n`;
      });
    } else {
      cbMessage += '–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î.\n';
    }
    await bot.sendMessage(chatId, cbMessage, { parse_mode: 'Markdown' });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Supabase:', error);
    bot.sendMessage(chatId, '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.');
  }
});

// 3. –õ–û–ì–Ü–ö–ê –î–õ–Ø –ü–†–ò–ô–û–ú–£ –°–ü–û–í–Ü–©–ï–ù–¨ –í–Ü–î –°–ê–ô–¢–£
// ----------------------------------------------------

// ! --- –ù–û–í–ò–ô –ë–õ–û–ö: –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É (Health Check) ---
// –¶–µ–π –º–∞—Ä—à—Ä—É—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω, —â–æ–± Render –±–∞—á–∏–≤, —â–æ –Ω–∞—à —Å–µ—Ä–≤—ñ—Å "–∂–∏–≤–∏–π"
app.get('/', (req, res) => {
  res.status(200).send('Bot server is running and healthy.');
});

// –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Ä—à—Ä—É—Ç, –Ω–∞ —è–∫–∏–π Supabase –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –¥–∞–Ω—ñ
app.post('/new-application-notify', (req, res) => {
  const application = req.body.record;
  const message = `üéâ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Ä–æ–∫!\n\n–Ü–º'—è: ${application.firstName} ${application.lastName}\nEmail: ${application.email}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${application.phone}\n–§–æ—Ä–º–∞—Ç: ${application.lessonFormat}`;
  
  authorizedUsers.forEach(chatId => {
    bot.sendMessage(chatId, message);
  });
  
  res.status(200).send('OK');
});

app.post('/new-callback-notify', (req, res) => {
  const callback = req.body.record;
  const message = `üîî –ó–∞–º–æ–≤–ª–µ–Ω–æ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫!\n\n–¢–µ–ª–µ—Ñ–æ–Ω: ${callback.phone}`;
  
  authorizedUsers.forEach(chatId => {
    bot.sendMessage(chatId, message);
  });

  res.status(200).send('OK');
});

// --- –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä ---
app.listen(PORT, () => {
  console.log(`Webhook server is running on port ${PORT}`);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∏–π–º–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏...');