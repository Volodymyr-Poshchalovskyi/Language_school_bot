/**
 * @file bot.js
 * @description Admin Telegram bot for a language school. Handles viewing applications from a Supabase DB.
 */

// --- DEPENDENCIES & CONFIG ---
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// Deconstruct environment variables for clarity and immediate validation.
const {
  TELEGRAM_BOT_TOKEN: token,
  SECRET_PASSWORD: secretPassword,
  SUPABASE_URL: supabaseUrl,
  SUPABASE_ANON_KEY: supabaseKey,
} = process.env;

// ! Critical check to ensure the bot can run.
if (!token || !secretPassword || !supabaseUrl || !supabaseKey) {
  console.error('FATAL ERROR: Missing one or more required environment variables. Check your .env file.');
  process.exit(1);
}

// --- INITIALIZATION ---
const bot = new TelegramBot(token, { polling: true });

const supabase = axios.create({
  baseURL: supabaseUrl,
  headers: {
    'apikey': supabaseKey,
    'Authorization': `Bearer ${supabaseKey}`,
  },
});

// --- STATE MANAGEMENT (In-Memory) ---
const authorizedUsers = new Set();
const chatMessages = new Map();

// --- TELEGRAM KEYBOARD LAYOUT ---
const mainKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: '–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å–µ' }],
      [{ text: '–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ä–æ–∫' }, { text: '–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫' }],
    ],
    resize_keyboard: true,
  },
};

// --- HELPER FUNCTIONS ---
const isAuthorized = (chatId) => authorizedUsers.has(chatId);

async function clearPreviousMessages(chatId) {
  const messageIds = chatMessages.get(chatId);
  if (messageIds && messageIds.length > 0) {
    await Promise.all(
      messageIds.map(id => bot.deleteMessage(chatId, id).catch(() => {})) // Suppress errors
    );
  }
  chatMessages.set(chatId, []);
}

async function sendAndTrackMessage(chatId, text, options) {
  try {
    const sentMsg = await bot.sendMessage(chatId, text, options);
    const currentMessages = chatMessages.get(chatId) || [];
    chatMessages.set(chatId, [...currentMessages, sentMsg.message_id]);
  } catch (error) {
    console.error('Failed to send or track message:', error.message);
  }
}

// --- DATA FETCHING & FORMATTING ---
async function showApplications(chatId) {
  try {
    const { data: applications } = await supabase.get('/rest/v1/Applications?select=*&order=id.asc');

    if (!applications || applications.length === 0) {
      return sendAndTrackMessage(chatId, 'üìÇ –ó–∞—è–≤–æ–∫ –Ω–∞ —É—Ä–æ–∫ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î.', mainKeyboard);
    }

    let message = 'üìã <b>–í—Å—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ä–æ–∫:</b>\n\n';
    message += '<pre>';
    message += 'ID  | –Ü–º\'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ    | –ö–æ–Ω—Ç–∞–∫—Ç–∏\n';
    message += '----|----------------------|--------------------------\n';
    applications.forEach(app => {
      const id = app.id.toString().padEnd(4);
      const name = `${app.firstName} ${app.lastName}`.slice(0, 20).padEnd(22);
      const contact = (app.email || app.phone || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ').slice(0, 26);
      message += `${id}| ${name}| ${contact}\n`;
    });
    message += '</pre>';
    
    const options = {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: applications.map(app => ([
          { text: `üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É ‚Ññ${app.id}`, callback_data: `copy_app_${app.id}` }
        ]))
      }
    };

    sendAndTrackMessage(chatId, message, options);
  } catch (error) {
    console.error('Error fetching applications:', error.response?.data || error.message);
    sendAndTrackMessage(chatId, '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ä–æ–∫.', mainKeyboard);
  }
}

async function showCallbacks(chatId) {
  try {
    const { data: callbacks } = await supabase.get('/rest/v1/CallBacks?select=*&order=id.asc');

    if (!callbacks || callbacks.length === 0) {
      return sendAndTrackMessage(chatId, 'üìÇ –ó–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î.', mainKeyboard);
    }

    let message = 'üìû <b>–í—Å—ñ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫:</b>\n\n';
    message += '<pre>';
    message += 'ID  | –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n';
    message += '----|------------------\n';
    callbacks.forEach(cb => {
      message += `${cb.id.toString().padEnd(4)}| ${cb.phone}\n`;
    });
    message += '</pre>';
    
    const options = {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: callbacks.map(cb => ([
          { text: `üìû –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫ ‚Ññ${cb.id}`, callback_data: `copy_cb_${cb.id}` }
        ]))
      }
    };

    sendAndTrackMessage(chatId, message, options);
  } catch (error) {
    console.error('Error fetching callbacks:', error.response?.data || error.message);
    sendAndTrackMessage(chatId, '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫.', mainKeyboard);
  }
}

// --- BOT EVENT HANDLERS ---
bot.onText(/\/start(.*)/, async (msg, match) => {
  const chatId = msg.chat.id;
  await clearPreviousMessages(chatId);
  const password = match[1].trim();

  if (!password) {
    return sendAndTrackMessage(chatId, '–í—ñ—Ç–∞—é! –î–ª—è –¥–æ—Å—Ç—É–ø—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∑ –ø–∞—Ä–æ–ª–µ–º:\n`/start –≤–∞—à_–ø–∞—Ä–æ–ª—å`', { parse_mode: 'Markdown'});
  }
  
  if (password === secretPassword) {
    authorizedUsers.add(chatId);
    sendAndTrackMessage(chatId, '‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', { parse_mode: 'HTML', ...mainKeyboard });
  } else {
    sendAndTrackMessage(chatId, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å.');
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  if (msg.text && msg.text.startsWith('/start')) return;
  if (!isAuthorized(chatId)) {
    await clearPreviousMessages(chatId);
    return sendAndTrackMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å. –í–≤–µ–¥—ñ—Ç—å `/start [–ø–∞—Ä–æ–ª—å]`', { parse_mode: 'Markdown' });
  }
  
  await clearPreviousMessages(chatId);

  switch (msg.text) {
    case '–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å–µ':
      await showApplications(chatId);
      await sendAndTrackMessage(chatId, '---', mainKeyboard);
      await showCallbacks(chatId);
      break;
    case '–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ä–æ–∫':
      await showApplications(chatId);
      break;
    case '–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫':
      await showCallbacks(chatId);
      break;
    default:
      sendAndTrackMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.', mainKeyboard);
  }
});

bot.on('callback_query', async (callbackQuery) => {
  const { data, message } = callbackQuery;
  const chatId = message.chat.id;

  bot.answerCallbackQuery(callbackQuery.id);

  if (!isAuthorized(chatId)) {
    
    return bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.');
  }

  const [action, type, id] = data.split('_');

  if (action === 'copy') {
    let responseText = `–î–∞–Ω—ñ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:\n\n`;
    try {
      if (type === 'app') {
        const { data: applications } = await supabase.get(`/rest/v1/Applications?id=eq.${id}&select=*`);
        const app = applications[0];
        if (app) {
          responseText += `–Ü–º'—è: ${app.firstName} ${app.lastName}\n`;
          responseText += `Email: ${app.email || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
          responseText += `–¢–µ–ª–µ—Ñ–æ–Ω: ${app.phone || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
          responseText += `–§–æ—Ä–º–∞—Ç: ${app.lessonFormat}`;
        }
      } else if (type === 'cb') {
        const { data: callbacks } = await supabase.get(`/rest/v1/CallBacks?id=eq.${id}&select=*`);
        const cb = callbacks[0];
        if (cb) {
          responseText += `–¢–µ–ª–µ—Ñ–æ–Ω: ${cb.phone}`;
        }
      }
      
      sendAndTrackMessage(chatId, `<code>${responseText}</code>`, { parse_mode: 'HTML', ...mainKeyboard });
    } catch (error) {
      sendAndTrackMessage(chatId, '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å.', mainKeyboard);
    }
  }
});

// --- BOT STARTUP ---
console.log('Bot is running and polling for messages...');